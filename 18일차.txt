@ 파일 입출력

- 자바 입출력 스트림 (InputStream / OutputStream)
- 자바 프로그래밍이 디스크에 접근해서 파일을 읽고 쓰는 통로를 스트림이라고 한다.

1. 스트림은 입출력 장치와 자바 프로그램의 양 끝에서 전달된다.
2. 단방향 통신이며 입력 / 출력 스트림은 독립적으로 각각 움직인다.
3. 연속된 데이터의 흐름으로 입출력 진행 시 다른 작업을 할 수 없는 상태가 된다. (입출력이 Interrupt의 최우선 단위가 된다.)

@ 입출력 스트림의 종류
- 입출력 패키지는 java.io 클래스에서 제공되며 파일 시스템의 정보를 얻기 위해서 File 클래스와 데이터 입출력을 위한
다양한 스트림 클래스를 제공한다.

1. 바이트 기반 스트림
- 파일 형식에 구애받지 않고 모든 파일을 읽고 쓸 수 있으며 바이트 기반 입력 스트림의 최상위 클래스는 InputStream이며
바이트 기반 출력 스트림의 최상위 클래스는 OutputStream이다.

1.1) InputStream
- 상속을 받아서 다양한 스트림을 제공하고 있으며 개발 환경과 상황에 따라 목적을 갖고 다양한 메서드를 오버라이딩해서
계층 구조를 사용하게 된다.
# read() : 문자를 1byte씩 읽고 반환이 없으면 -1을 반환
# read(byte[] b) : 배열에 읽을 문자를 저장하고 읽은 수 만큼 반환 / 없으면 -1 반환
# read(byte[], int offset, int len) : 주어진 배열에 정해진 범위 만큼을 알아서 저장한다.
offset : 배열의 시작 위치 / len : 길이
# int available() : 스트림으로 읽어올 수 있는 데이터 크기를 반환
# close() : 사용을 종료하고 자원을 반환

- FileInputStream
- 파일에서 byte 단위로 자료를 읽어 들일 때 사용하는 스트림이다.
- 이미지, 동영상, 텍스트 모든 타입의 파일들을 읽어올 수 있다.
1) 파일을 반복하는 횟수를 줄일 수 있을 때에는 버퍼의 길이만큼 전체의 값을 줄여줄 수 있다.
- read() : 1byte -> read(byte[] b) : 배열의 값을 늘려서 버퍼의 크기를 크게 한다
- 큰 바구니로 한꺼번에 담아서 쓰겠다.

- FileOutputStream
- 파일을 버퍼 단위로 읽어들이면서 여러 가지 파일들의 내용을 출력하는 방법을 사용한다.
만드는 방법) new FileoutputStream(경로 / 파일명, 이어쓰기 옵션)
- 이어쓰기 옵션 : true / false : 새로 만든다.
- 이미지를 복사해서 패키지 안에서 새롭게 이미지를 생성하는 방법
- read(byte[]) : 단위로 묶어야 큰 파일은 성능이 빨라진다.


- FilterInputStream -> DataInputStream / BufferedInputStream

- ByteArrayInputStream

- ObjectInputStream

1.2) OutputStream

2. 문자 기반 스트림
- 문자를 기반으로 하기 때문에 텍스트 문서만으로 읽고 쓸 수 있다.
- 문자 기반 입력 스트림의 최상위 클래스 Reader가 있으며 문자 기반 출력 스트림의 최상위 클래스는 Writer이다.

2.1) Reader : 문자 입력 스트림
- BufferedReader
- CharArrayReader
- InputStreamReader -> FileReader

2.2) Writer : 문자 출력 스트림
- 문자 기반의 출력 스트림이고 최상위 클래스는 Writer 상속해 다양한 클래스를 제공한다.
- BufferedWriter
- CharArrayWriter
- InputStreamWriter -> FileWriter

3. 보조 스트림
- 보조 스트림은 실제로 데이터를 주고 받지 않고 스트림의 기능을 향상시키거나 새로운 기능을 제공해주는 스트림으로
다른 보조 스트림과 중첩해서 사용한다.
- 기반 스트림 : 대상에 직접적으로 자료를 읽고 쓰는 스트림이다.
- 보조 스트림 : 직접 읽고 쓰는 기능은 없지만 기반 스트림에 추가로 사용하는 스트림이다.

3.1) 성능 향상 보조 스트림
- 하드 디스크나 네트워크 입출력은 성능에 영향을 주기 때문에 보조 스트림을 이용해 Buffer에 메모리 작업을 시켜서
성능을 향상시킬 수 있다.
- Byte 기반
* BufferedInputStream / BufferedOutputStream (Byte 기반)
* 프로그램 장치로부터 데이터를 직접 읽는 대신에 버퍼에 저장해 두었다가 큰 단위로 받을 수 있다.
* 출력에 대한 보조 스트림은 프로그램에서 전송한 데이터를 내부 Buffer에 쌓아 두었다가 꽉 차면 모든 데이터를 한꺼번에 저장한다.

- 문자 기반
* BufferedReader / BufferedWriter (문자 기반)

3.2) 문자 변환 보조 스트림
- 바이트 기반 스트림은 글자를 읽을 때 한글일 경우 정상적으로 출력되지 않는다.
- InputStreamReader
* 바이트 기반 스트림 InputStream을 문자 기반 스트림 Reader로 변환하는 보조 스트림이다.
(바이트 -> 보조스트림 -> 문자스트림)
- OutputStreamReader
* 바이트 기반 스트림 OutputStream을 문자 기반 스트림 Writer로 변환하는 보조 스트림이다.
(바이트 -> 보조스트림 -> 문자 기반 스트림)


@ File Class
- 파일 및 폴더에 대한 정보들을 파악한 메서드
- 물리적인 파일이나 폴더를 다양한 메서드로 속성에 대한 정보 값을 지원하기 위해서 사용된다.

@ 직렬화 / 역 직렬화
- 자바 시스템 내부에 사용하는 객체나 데이터를 외부 시스템에서 사용할 수 있도록 Byte 단위 데이터로 변환하는 기술
- SerialVersionUID : 인터페이스를 상속 받아서 코드 값을 만든다.
- 기반 스트림 : FileOutputStream / FileInputStream
1) 직렬화 : 객체를 데이터로 변환하는 방법(ObjectOutputStream)
2) 역 직렬화 : 데이터를 객체로 변환하는 방법(ObjectInputStream)


@ 네트워크 기초 : 유선 무선 통신으로 실제로 데이터를 주고 받는다.
- LAN : 가정용에서 사용하는 통신회선 -> 특정 공간의 컴퓨터를 연결
- WAN : Router ========= Router 인터넷

@ 서버와 클라이언트
- 서버 : 서비스를 제공하는 프로그램
- 클라이언트 : 서비스를 요청하는 사람

클라이언트 -> 연결 request -> 서버 처리 -> 처리 요청 -> response 응답 받기

- IP (Internet Protocol) : 주소 얻기
* java.net 패키지를 통해서 알아낼 수 있다.

- TCP (Transmission Control Protocol) : 허용하는지 허용 하지 않는지를 데이터로 주고 받는다.
* 클라이언트가 연결 요청 -> 서버 수락(통신회선 고정 -> 전달)