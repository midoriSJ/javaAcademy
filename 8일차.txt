@ 객체지향 프로그램

클래스 > 객체(생성자) = 인스턴스

객체 = 생활 속에 있는 모든 것들
       = 사물의 행동과 형태들은 단위별로 묶어서 생성한다.
객체 = 속성(변수) + 기능(메서드)

객체의 용도 : 객체가 가지고 있는 기능과 속성에 따름

사물과 속성과 기능을 분석한 다음 데이터(변수)와 함수로 정의함으로써
실제 세계를 컴퓨터 속에 옮겨 놓은 것과 같은 가상세계를 구현(클래스)하고 실험하면서
시간과 비용을 줄일 수 있다.

특징
1. 코드의 재사용성을 높임
- 새로운 코드를 이용할 때 기존 코드를 쉽게 작성할 수 있다.

2. 유지보수 (코드의 관리)가 좋다
- 코드 간의 관계를 적은 노력으로 쉽게 코드를 변경한다

3. 중복 코드 제거 (코드 불일치로 인한 오동작 방지)
- 신뢰성이 높은 프로그래밍을 가능하게 한다.
- 같은 설계도이기 때문에 코드의 불일치가 없다.

4. 객체지향의 핵심개념 4가지
- 상속, 캡슐화, 다형성, 추상화

@ 클래스와 객체

클래스를 기반으로 객체를 생성한다
(설계도가 있으니까 객체를 통해서 여러 개의 모델을 만들 수 있다.)
설계도를 구현하고 설계도 안에 대표할 수 있는 설명서를 기술한다. (기능 = 속성)

- 클래스의 정의 : 클래스란 객체를 정의해 놓은 것
- 클래스의 용도 : 클래스는 객체를 생성하는 데 사용

프로그래밍에서의 객체는 클래스에 정의된 내용대로 메모리에 생성된 것을 뜻함.
설계도를 통해서 제품을 만드는 것 같이, 클래스를 통해서 객체를 만듦

유형의 객체 - 책상, 의자, 자동차, TV, 스마트폰 등
무형의 객체 - 수학 공식, 프로그램, 에러 혹은 논리적 개념

* 클래스(설계도)만 잘 만들어 놓는다면 복잡한 제품이라도 객체를 생성해서 사용하기만 하면 된다.

- 클래스로부터 객체를 생성하면, 클래스에 정의된 속성과 기능을 가진 객체가 만들어짐

1) 클래스 선언
public class Car{	// 실행용 클래스 -> 파일 이름 : Car.java
	public static void main(String args[]){

	}

}

public class Car_option{	// 라이브러리 클래스

}

2) 클래스 구분
- 실행용 클래스 : main 메서드 포함한 클래스 -> 프로그램 실행
- 라이브러리 클래스 : 별도의 클래스

3) 객체와 인스턴스
1. 객체의 정의
클래스로부터 객체를 만드는 과정을 클래스의 인스턴스화(Instantiate)라고 하며
어떤 클래스로부터 만들어진 클래스 인스턴스(instanse)라고 한다.

클래스 -> (인스턴스화) -> 인스턴스(객체)가 된다.

2. 객체의 구성 요소(속성, 기능)
객체는 다른 속성과 기능들의 집합이다. (생성할 때 마다 달라짐)
속성(property) : 멤버 변수, 특성, 상태값 등
기능(function) : 메서드, 행위, 함수 등


@ 클래스의 구성
클래스 설계도에 들어갈 수 있는 요소이다.
생성자로 접근해서 클래스 내부에 필드(변수)와 메소드(함수)를 정의하고 사용했다.

1) 필드 : 객체의 데이터 상태를 저장하는 변수이다.
- 필드의 자료형은 기본 자료형과 같다.
- 필드를 초기화하지 않으면 기본값으로 초기화된다.
- 필드를 접근하는 방법은 객체를 생성해서 접근한다.

객체명 : 클래스를 이용해 만든 객체이름
필드명 : 만든 객체가 가지고 있는 필드 이름

2) 메서드 : 객체의 기능을 담당하는 요소이다.
메서드 호출하면 기능을 수행할 수 있고 리턴값이 있거나 없다.
따라서 결과값을 출력할 수 있다.
반환타입 메서드명(){
  // return x or o : 반환타입이 void일 경우 return 삭제 가능
}

3) 생성자 : 클래스를 호출해서 접근할 수 있는 대상


@ 정적 멤버 (static)  / 인스턴스 멤버 / 지역변수
1) 인스턴스 (멤버변수 : IV)
- 모든 객체가 같은 필드값을 가질 수 있다.
- 인스턴스를 생성하면 멤버변수의 값을 변화시켜서 따로 선언 가능
- 독립적인 저장공간을 가지게 되며 고유한 속성 유지한다.

2) 정적(클래스) 멤버 변수(CV)
- 객체가 아닌 클래스의 의존적인 요소이다.
- 객체를 생성하지 않고 변수를 사용할 수 있다.
- 객체를 생성할 때 메모리가 올라가는 것이 아니라 프로그램이 시작할 때 메모리가 적재되는 방식
- 전역변수의 성격을 갖고 모든 인스턴스가 공통된 저장공간을 갖게 된다.
(전역변수 메모리를 따로 갖는다)

3) 지역 변수
- 메서드 영역이고 메서드 내에서만 선언된 블록에서만 사용 가능하다.
- 블록을 벗어나면 소멸되서 사용할 수 없다.

@ 메서드

1) 메서드의 정의
- 특정 기능을 수행하기 위해 코드를 하나의 블록으로 묶어 놓는것이다.
- 값을 받아서 처리하고, 결과를 반환

2) 메서드의 장점
- 코드의 중복을 줄일 수 있다.
- 코드의 관리가 쉽다.
- 코드를 재사용할 수 있다.
- 코드가 간결해서 이해하기 쉬워진다

3) 메서드 작성법
- 반복적으로 수행되는 여러 문장을 메서드로 작성
- 하나의 메서드는 한가지 기능만 수행하도록 작성
- int add(int x, int y) {	// 선언부
	...		// 구현부
}

- int add(int x, y) { ... } (에러 발생 -> 매개변수 잘못 선언)

4) 메서드의 구조 (정적 메서드 / 멤버 메서드)
선언부 : header
- 매개변수 : 입력되는 데이터형과 변수명
- 반환타입 : 리턴값과 반환타입은 일치해야된다.

return int형 => header 반환타입 동일하게 맞춰야 한다

구현부 : body
- 지역변수(IV) : 매서드 내에 선언된 변수





