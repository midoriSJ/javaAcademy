@연산자의 종류
값(데이터)_변수에 담은 자료
* 데이터를 처리하고 산출하는 과정
조건에 따라서 데이터를 처리하는 산술연산자가 달라진다.
거기에 따라서 산출하는 과정이다.
5+5 : 더할 수 있는 산출과정(+)
5*5 : 곱할 수 있는 산출과정(*)
1) 연산자 : 연산을 수행하는 기호(+-*/)
2) 피연산자 : 연산자가 수행하려는 대상

1. 단항 연산자 : 피연산자(operand)가 1개인 경우 // -2
부호 : + - * / %
int x = +3; (양수)
int y = -6; (음수)
증감 : ++ / --
피연산자의 값을 1개씩 증가하거나 감소할 때 사용
int x = ++3;
int y = --2;
논리 : ! (not)
int gender = false;
!gender = true

2. 이항 연산자 : 피연산자(operand)가 2개인 경우
연산자를 가운데 두고 왼쪽 오른쪽에 위치한다.
(피연산자 연산자 피연산자) : 기본 형태
// 수학에서 자주 나오는 연산식이다.

1) 산술 (5+5)
사칙 연산에서 나오는 산술연산자와 나머지 연산을 추가한다.
종류 : + - * / %
* 피연산자의 자료형이 일치하지 않는 경우 큰 자료형으로 변환한다.

2) 대입 연산자
오른쪽 피연산자의 값을 왼쪽 피연산자에 대입할때 저장한다.
* 복합 대입 연산자 ( = += -= *= /= %=)
x = x + 10;
x += 10;
int y = 19;
y = y + 1; // y += 1; 
y = y - 1 // y -= 1;
y = y * 1 // y *= 1;
y = y / 1 // y /= 1;
* 같은 의미로 간략하게 사용됨

3) 비교(관계연산자 : > / < / >= / <= / == / != )
피연산자를 부호로 비교하면서 판별하는 연산자이다. (왼 -> 오)
if (5 < 6) : 조건문과 반복문의 조건식으로 사용되며 논리적인 판단
주의사항:
1) boolean형을 제외한 모든 자료형에서 사용 가능하고 참조형에서는 사용될 수 없다.
2) 관계 연산자는 2개 이상 연속으로 사용할 수 없다.
if(A(3) <= B(5)) // true
if(A(5) <= B(3)) // false
A <= B == C(X) : A와 B 비교한 후 결과값을 반환하기 때문에 연산의 대상이 되지 못함


4) 논리 연산자(&&, || , &, |, ^, !)
1.(&&,&) AND = 논리곱
2.(||,|) OR = 논리합
3.(^) XOR = 배타적 논리합
4.(!) NOT = 부정

5) 논리 부정 연산자(!)
true : false / false : true

3. 삼항 연산자 : 
피연산자가 3개인 조건 연산식이다.
삼항 연산자(operand : 3개) : 연산을 할 수 있는 대상이 3개
삼항 연산자의 피연산자는 조건으로 사용되는 조건문과 조건문 결과에 따라 2개로 구성된다.
조건식(피연산1)?참(피연산2):거짓(피연산3)