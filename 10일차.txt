1) super() 메서드 (부모의 생성자를 초기화)
- 기본 생성자가 호출되면 부모 기본 생성자도 호출된다.
- 부모 객체를 먼저 생성하고 자식 객체 생성한다

Person{
	String born;
	Person(String born){
		this.born = born;
	}
}

Man extends Person {
	int age;
 	String name;
	Man(){

	}
	Man(String name, int age, String born){
		super(born);
		this.name = name;
		this.age = age;
	}
}

main(){
	// 객체 생성
	Man m = new Man("SBS", 10, "Seoul");
	Man m2 = new Man();
}

2) 오버라이딩(overriding) = 부모 선언부를 그대로 사용
- 자식 클래스는 부모 클래스를 상속 받을때 멤버의 특성과 행동들을 그대로 상속받아 사용하고
메서드를 다시 변경해서 구현해야한다.

- 메서드 이름 / 매개변수 : 동일 (오버로딩과 다른 점)
- 자식 클래스 오버라이딩(메서드) 부모는 영향을 받지 않는다.
- 애노테이션(@overriding) : 사용할 수는 있지만 직접적인 영향은 없다.
                                        컴파일할때 에러가 발생하면 확인 가능
- 참조변수 / 인스턴스 메서드 : 객체 실행될 때 사용되는 메모리 / 클래스 메서드(static) 참조될 수 없다.

@ 접근 제한자
- 객체지향 프로그래밍의 특징이며 정보를 은닉하기 중요한 부분이다.
- 특정 범위 접근할 수 있게 클래스 / 메서드 / 필드 접근할 수 있는 영역을 명시해서 사용한다.

- 접근 제한자 종류(public > protected > default(별도의 표시 없음) > private)
공통 : 생성자 / 멤버 필드 / 멤버 메서드
1. public (다른 패키지 / 같은 패키지 / 클래스 가능)
2. default (별도의 표시 없음 / 같은 패키지 / 클래스 가능)
접근제한자(public / default) class SBS{} = 클래스 사용 가능

3. protected (다른 패키지(상속) / 같은 패키지 / 클래스 가능)
4. private(클래스 가능) : 내부 클래스(멤버 필드 / 멤버 메서드)

@ 2차 상속 (단일 상속)
- 자바의 상속은 하나의 부모만 갖을 수 있는 특징이다.
- 부모도 부모(조상) 존재할 수 있기 때문에 여러 조상으로 상속 받는다는 것이다.

@ final 클래스와 final 메서드
- final : 자바에서 상수키워드로 사용되며 초기값이 반영된다. (불변하는 값)

# 클래스
접근제한자(public/default) final class 클래스이름{
	파이널 클래스로 정의하면 어떠한것도 부모와 자식 클래스로 사용될 수 없다
	상속 제한 용도로 사용
}

# 메서드
접근제한자(public / default / protected / private) final 메서드이름 {
	파이널 메서드 상속은 가능하지만 부모일 경우 자식이 오버라이딩(overriding) 허용하지 못하는 메서드
	부모는 부모 그대로 변화되지 않고 읽을 수 있는 권한 허용된다.
}

@ 다형성
- 다른 타입으로 변환을 한다는 것
- 기본 자료형 : 정수형 : byte short int long / 실수형 : float double
(자료형)
- 참조 자료형 : 객체 (클래스) 타입 변환
(클래스)

1) 클래스의 자동 타입 변환
- 상속 관계에 있는 자식 클래스의 객체를 부모 타입의 객체로 변환하는 것을 말함.
- 자식 객체를 만들면서 부모 타입을 변환시킬 수 있음
Parent(참조 자료형) p1 = new Child();

- 자식 객체를 부모 타입으로 변환
Child c = new Child();
Parent p2 = c;

1. 부모 객체를 자식 타입으로 변환할 수 없다.
2. 상속 관계에 있는 자식 클래스가 부모 객체로 변환할 때 적용된다.
3. 1차 상속 관계 아니더라도 형변환이 가능하다. (조상도 가능)
4. 상위 계층 클래스는 맞지만 직접적인 상속 관계가 아니면 자동 타입 변환 할 수 없다.
5. 부모 타입으로 변환한 객체는 자신의 클래스의 부모 클래스와 별개로 작성한 멤버들을
사용할 수 없다.

2) 클래스의 강제 타입 변환
- 자식 객체가 부모 타입으로 자동 타입변환을 한 후 다시 자식 타입으로 변환하는 것이다.
- 개발자가 직접 클래스의 타입을 명시해야 한다.
- 여러 번 접근 시 타입 변환
자식 타입 변수 = (자식 타입) 부모 타입;

@ 다형성 객체 멤버 변수
- 하나의 타입으로 다양한 객체를 사용할 수 있으며 객체가 특정 클래스의 필드가 되면서
하나의 부품처럼 사용할 수 있다.
상속 + 메서드 오버라이딩 + 클래스 타입 변환

1. 다형성은 객체의 수정을 최소화하면서 오버라이딩을 간결하게 해준다.
2. 객체를 필드로 가지는 클래스의 객체 타입을 부모 클래스로 수정

