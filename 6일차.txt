- while문
1) 조건을 만족하는 동안 블록{} 반복한다
2) 조건이 참일 경우만 증가하고 증감식은 없다.
* for문에 비해 while문 구조문이 단순하다.

1. 조건식에 의해서 참일 경우만 반복 실행
2. 수행될 문장으로 명령문을 처리한다.
3. 조건식이 증가해야 할 경우 내부적으로 증가
4. 무한루프 while(1){ //실행될 문장 };
--> break; (if문에서 배웠다) 시 빠져나간다.

# while문의 표현방식
int i = 0;
while(i <= 10){
	System.out.println(i);
	i++;
}


- do-while문
1) 블록{}을 무조건 1번 실행 처리한다.
- 사용자 입력을 받을 때 유용하다.
- 처음 한 번은 무조건 실행

2) 표현 방법

do{
	// 조건식의 연산 결과가 참일때 수행될 구현부
	// while이 꼬리 -> 조건과 상관없이 한 번은 실행
}while(조건식);

* 조건식 끝날 때 세미콜론으로 마무리

@ continue문
1) 반복문 내에서만 사용될 수 있다.
진행되는 도중에 continue문을 만나면 끝으로 이동해서 다음 반복으로 넘어간다.

@ break문
1) 자신이 포함된 가장 가까운 반복문을 벗어난다.
(중첩 for문일 시 : 내부 for문 -> 외부 for문)
(일반 for문일 시 : break)

2) if문과 함께 사용되고 특정 조건을 만족할 때 반복문을 벗어나게 된다.

@ 배열의 정의
- 변수라는 값으로 데이터를 저장하려면 메모리 안에서 연속적으로 값을 삭제하고 다시 추가한다.
자료형 변수를 지정하여서 여러 데이터를 담을 수 있는 구조를 자료 구조(data structure)라고 한다.

1) 배열을 선언하는 방법

int arr1 = 0;
int arr2 = 0;
int arr3 = 0;
int arr4 = 0;
int arr5 = 0;

=> int arr1 = {1, 2, 3, 4, 5};
* 하나의 자료형으로 선언해서 배열을 만든다.

자료형 [] 배열 이름 = int [] arr;
자료형 배열 이름[] = int arr;
* 자료형 뒤에 붙이고 변수명 뒤에 붙여도 된다
배열이라는 의미로 선언되려면 가독성 높이는 방법 때문에 자료형 뒤에 선언하는 것을 선호